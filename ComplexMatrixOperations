"

```python
import numpy as np
from scipy.linalg import lu

def det(matrix):
    _, L, U = lu(matrix)
    return np.prod(np.diag(U))

def inv(matrix):
    assert matrix.shape[0] == matrix.shape[1], ""Matrix must be square""
    n = matrix.shape[0]
    adj = np.empty_like(matrix)
    for i in range(n):
        for j in range(n):
            m = np.delete(np.delete(matrix, i, 0), j, 1)
            adj[j, i] = (-1) ** (i + j) * det(m)
    return adj / det(matrix)

A = np.array([[3, -1, 5, 3], [3, 7, -1, 0], [-3, 2, 1, 6], [9, 0, 2, 8]])
B = np.array([[-1, 2, -1, 127], [0, 175, -221, 234], [-123, 456, -789, 343], [23, 5467, 271, 918]])

print(""A ="")
print(A)
print(""B ="")
print(B)
print(""det(A) ="", det(A))
print(""det(B) ="", det(B))
print(""A * inv(A) â‰ˆ I (up to floating-point round-off errors):"")
print(np.round(A @ inv(A)).astype(int))

C = np.round(A @ inv(B)).astype(int)
print(""\nC = (A * inv(B)) ="")
print(C)
```
"
